%%
%% Autogenerated by Thrift Compiler (0.9.2)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(hibari_types).

-include("hibari_types.hrl").

-export([struct_info/1, struct_info_ext/1]).

struct_info('Property') ->
  {struct, [{1, string},
          {2, string}]}
;

struct_info('AddOptions') ->
  {struct, [{1, i64},
          {2, bool}]}
;

struct_info('UpdateOptions') ->
  {struct, [{1, i64},
          {2, i64},
          {3, i32},
          {4, i32},
          {5, bool}]}
;

struct_info('DeleteOptions') ->
  {struct, [{1, i64},
          {2, bool},
          {3, bool}]}
;

struct_info('ReadOptions') ->
  {struct, [{1, i64},
          {2, bool},
          {3, bool},
          {4, bool},
          {5, bool}]}
;

struct_info('DoTransaction') ->
  {struct, []}
;

struct_info('DoAdd') ->
  {struct, [{1, string},
          {2, string},
          {3, {list, {struct, {'hibari_types', 'Property'}}}},
          {4, {struct, {'hibari_types', 'AddOptions'}}}]}
;

struct_info('DoReplace') ->
  {struct, [{1, string},
          {2, string},
          {3, {list, {struct, {'hibari_types', 'Property'}}}},
          {4, {struct, {'hibari_types', 'UpdateOptions'}}}]}
;

struct_info('DoRename') ->
  {struct, [{1, string},
          {2, string},
          {3, {list, {struct, {'hibari_types', 'Property'}}}},
          {4, {struct, {'hibari_types', 'UpdateOptions'}}}]}
;

struct_info('DoSet') ->
  {struct, [{1, string},
          {2, string},
          {3, {list, {struct, {'hibari_types', 'Property'}}}},
          {4, {struct, {'hibari_types', 'UpdateOptions'}}}]}
;

struct_info('DoDelete') ->
  {struct, [{1, string},
          {2, {struct, {'hibari_types', 'DeleteOptions'}}}]}
;

struct_info('DoGet') ->
  {struct, [{1, string},
          {2, {struct, {'hibari_types', 'ReadOptions'}}}]}
;

struct_info('DoGetMany') ->
  {struct, [{1, string},
          {2, i32},
          {3, {struct, {'hibari_types', 'ReadOptions'}}}]}
;

struct_info('Op') ->
  {struct, [{1, {struct, {'hibari_types', 'DoTransaction'}}},
          {2, {struct, {'hibari_types', 'DoAdd'}}},
          {3, {struct, {'hibari_types', 'DoReplace'}}},
          {4, {struct, {'hibari_types', 'DoSet'}}},
          {6, {struct, {'hibari_types', 'DoRename'}}},
          {51, {struct, {'hibari_types', 'DoDelete'}}},
          {101, {struct, {'hibari_types', 'DoGet'}}},
          {102, {struct, {'hibari_types', 'DoGetMany'}}}]}
;

struct_info('DoOptions') ->
  {struct, [{1, bool},
          {2, bool}]}
;

struct_info('GetResponse') ->
  {struct, [{1, i64},
          {2, string},
          {3, i64},
          {4, {list, {struct, {'hibari_types', 'Property'}}}}]}
;

struct_info('GetManyResponse') ->
  {struct, [{1, {list, {struct, {'hibari_types', 'GetResponse'}}}},
          {2, bool}]}
;

struct_info('DoResult') ->
  {struct, [{1, bool},
          {2, i64},
          {3, {struct, {'hibari_types', 'GetResponse'}}},
          {4, {struct, {'hibari_types', 'GetManyResponse'}}}]}
;

struct_info('DoResponse') ->
  {struct, [{1, {list, {struct, {'hibari_types', 'DoResult'}}}}]}
;

struct_info('TxnFailure') ->
  {struct, []}
;

struct_info('ServiceNotAvailableException') ->
  {struct, []}
;

struct_info('NotImplementedException') ->
  {struct, []}
;

struct_info('TimedOutException') ->
  {struct, []}
;

struct_info('TSErrorException') ->
  {struct, [{1, string},
          {2, i64}]}
;

struct_info('KeyExistisException') ->
  {struct, [{1, string},
          {2, i64}]}
;

struct_info('KeyNotExistsException') ->
  {struct, [{1, string}]}
;

struct_info('InvalidOptionPresentException') ->
  {struct, [{1, string},
          {2, string}]}
;

struct_info('TransactionFailureException') ->
  {struct, [{1, i32},
          {2, {struct, {'hibari_types', 'TxnFailure'}}}]}
;

struct_info(_) -> erlang:error(function_clause).

struct_info_ext('Property') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, optional, string, 'value', undefined}]}
;

struct_info_ext('AddOptions') ->
  {struct, [{1, optional, i64, 'exp_time', undefined},
          {2, optional, bool, 'value_in_ram', undefined}]}
;

struct_info_ext('UpdateOptions') ->
  {struct, [{1, optional, i64, 'exp_time', undefined},
          {2, optional, i64, 'test_set', undefined},
          {3, optional, i32, 'exp_time_directive', undefined},
          {4, optional, i32, 'attrib_directive', undefined},
          {5, optional, bool, 'value_in_ram', undefined}]}
;

struct_info_ext('DeleteOptions') ->
  {struct, [{1, optional, i64, 'test_set', undefined},
          {2, optional, bool, 'must_exist', undefined},
          {3, optional, bool, 'must_not_exist', undefined}]}
;

struct_info_ext('ReadOptions') ->
  {struct, [{1, optional, i64, 'test_set', undefined},
          {2, optional, bool, 'is_witness', undefined},
          {3, optional, bool, 'get_all_attribs', undefined},
          {4, optional, bool, 'must_exist', undefined},
          {5, optional, bool, 'must_not_exist', undefined}]}
;

struct_info_ext('DoTransaction') ->
  {struct, []}
;

struct_info_ext('DoAdd') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, string, 'value', undefined},
          {3, optional, {list, {struct, {'hibari_types', 'Property'}}}, 'properties', []},
          {4, required, {struct, {'hibari_types', 'AddOptions'}}, 'options', #'AddOptions'{}}]}
;

struct_info_ext('DoReplace') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, string, 'value', undefined},
          {3, optional, {list, {struct, {'hibari_types', 'Property'}}}, 'properties', []},
          {4, required, {struct, {'hibari_types', 'UpdateOptions'}}, 'options', #'UpdateOptions'{}}]}
;

struct_info_ext('DoRename') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, string, 'new_key', undefined},
          {3, optional, {list, {struct, {'hibari_types', 'Property'}}}, 'properties', []},
          {4, optional, {struct, {'hibari_types', 'UpdateOptions'}}, 'options', #'UpdateOptions'{}}]}
;

struct_info_ext('DoSet') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, string, 'value', undefined},
          {3, optional, {list, {struct, {'hibari_types', 'Property'}}}, 'properties', []},
          {4, required, {struct, {'hibari_types', 'UpdateOptions'}}, 'options', #'UpdateOptions'{}}]}
;

struct_info_ext('DoDelete') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, optional, {struct, {'hibari_types', 'DeleteOptions'}}, 'options', #'DeleteOptions'{}}]}
;

struct_info_ext('DoGet') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, optional, {struct, {'hibari_types', 'ReadOptions'}}, 'options', #'ReadOptions'{}}]}
;

struct_info_ext('DoGetMany') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, i32, 'max_keys', undefined},
          {3, optional, {struct, {'hibari_types', 'ReadOptions'}}, 'options', #'ReadOptions'{}}]}
;

struct_info_ext('Op') ->
  {struct, [{1, optional, {struct, {'hibari_types', 'DoTransaction'}}, 'txn', #'DoTransaction'{}},
          {2, optional, {struct, {'hibari_types', 'DoAdd'}}, 'add_kv', #'DoAdd'{}},
          {3, optional, {struct, {'hibari_types', 'DoReplace'}}, 'replace_kv', #'DoReplace'{}},
          {4, optional, {struct, {'hibari_types', 'DoSet'}}, 'set_kv', #'DoSet'{}},
          {6, optional, {struct, {'hibari_types', 'DoRename'}}, 'rename_kv', #'DoRename'{}},
          {51, optional, {struct, {'hibari_types', 'DoDelete'}}, 'delete_kv', #'DoDelete'{}},
          {101, optional, {struct, {'hibari_types', 'DoGet'}}, 'get_kv', #'DoGet'{}},
          {102, optional, {struct, {'hibari_types', 'DoGetMany'}}, 'get_many', #'DoGetMany'{}}]}
;

struct_info_ext('DoOptions') ->
  {struct, [{1, optional, bool, 'fail_if_wrong_role', undefined},
          {2, optional, bool, 'ignore_role', undefined}]}
;

struct_info_ext('GetResponse') ->
  {struct, [{1, required, i64, 'timestamp', undefined},
          {2, optional, string, 'value', undefined},
          {3, optional, i64, 'exp_time', undefined},
          {4, optional, {list, {struct, {'hibari_types', 'Property'}}}, 'proplist', []}]}
;

struct_info_ext('GetManyResponse') ->
  {struct, [{1, required, {list, {struct, {'hibari_types', 'GetResponse'}}}, 'records', []},
          {2, required, bool, 'is_truncated', undefined}]}
;

struct_info_ext('DoResult') ->
  {struct, [{1, required, bool, 'is_success', undefined},
          {2, optional, i64, 'timestamp', undefined},
          {3, optional, {struct, {'hibari_types', 'GetResponse'}}, 'get_res', #'GetResponse'{}},
          {4, optional, {struct, {'hibari_types', 'GetManyResponse'}}, 'get_many_res', #'GetManyResponse'{}}]}
;

struct_info_ext('DoResponse') ->
  {struct, [{1, required, {list, {struct, {'hibari_types', 'DoResult'}}}, 'results', []}]}
;

struct_info_ext('TxnFailure') ->
  {struct, []}
;

struct_info_ext('ServiceNotAvailableException') ->
  {struct, []}
;

struct_info_ext('NotImplementedException') ->
  {struct, []}
;

struct_info_ext('TimedOutException') ->
  {struct, []}
;

struct_info_ext('TSErrorException') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, i64, 'timestamp', undefined}]}
;

struct_info_ext('KeyExistisException') ->
  {struct, [{1, required, string, 'key', undefined},
          {2, required, i64, 'timestamp', undefined}]}
;

struct_info_ext('KeyNotExistsException') ->
  {struct, [{1, required, string, 'key', undefined}]}
;

struct_info_ext('InvalidOptionPresentException') ->
  {struct, [{1, required, string, 'option', undefined},
          {2, required, string, 'value', undefined}]}
;

struct_info_ext('TransactionFailureException') ->
  {struct, [{1, required, i32, 'do_op_index', undefined},
          {2, required, {struct, {'hibari_types', 'TxnFailure'}}, 'failure', #'TxnFailure'{}}]}
;

struct_info_ext(_) -> erlang:error(function_clause).

