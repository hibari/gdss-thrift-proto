%%
%% Autogenerated by Thrift Compiler (0.9.2)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(hibari_thrift).
-behaviour(thrift_service).


-include("hibari_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info(_) -> erlang:error(function_clause).
%%% interface
% add_kv(This, Table, Key, Value, Properties, Options)
function_info('add_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {list, {struct, {'hibari_types', 'Property'}}}},
          {5, {struct, {'hibari_types', 'AddOptions'}}}]}
;
function_info('add_kv', reply_type) ->
  i64;
function_info('add_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'ServiceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'TimedOutException'}}},
          {3, {struct, {'hibari_types', 'InvalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'KeyExistisException'}}}]}
;
% replace_kv(This, Table, Key, Value, Properties, Options)
function_info('replace_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {list, {struct, {'hibari_types', 'Property'}}}},
          {5, {struct, {'hibari_types', 'UpdateOptions'}}}]}
;
function_info('replace_kv', reply_type) ->
  i64;
function_info('replace_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'ServiceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'TimedOutException'}}},
          {3, {struct, {'hibari_types', 'InvalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'KeyNotExistsException'}}},
          {5, {struct, {'hibari_types', 'TSErrorException'}}}]}
;
% rename_kv(This, Table, Key, New_key, Properties, Options)
function_info('rename_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {list, {struct, {'hibari_types', 'Property'}}}},
          {5, {struct, {'hibari_types', 'UpdateOptions'}}}]}
;
function_info('rename_kv', reply_type) ->
  i64;
function_info('rename_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'ServiceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'TimedOutException'}}},
          {3, {struct, {'hibari_types', 'InvalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'KeyNotExistsException'}}},
          {5, {struct, {'hibari_types', 'TSErrorException'}}}]}
;
% set_kv(This, Table, Key, Value, Properties, Options)
function_info('set_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, {list, {struct, {'hibari_types', 'Property'}}}},
          {5, {struct, {'hibari_types', 'UpdateOptions'}}}]}
;
function_info('set_kv', reply_type) ->
  i64;
function_info('set_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'ServiceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'TimedOutException'}}},
          {3, {struct, {'hibari_types', 'InvalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'TSErrorException'}}}]}
;
% delete_kv(This, Table, Key, Options)
function_info('delete_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'hibari_types', 'DeleteOptions'}}}]}
;
function_info('delete_kv', reply_type) ->
  {struct, []};
function_info('delete_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'ServiceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'TimedOutException'}}},
          {3, {struct, {'hibari_types', 'InvalidOptionPresentException'}}},
          {4, {struct, {'hibari_types', 'KeyNotExistsException'}}},
          {5, {struct, {'hibari_types', 'TSErrorException'}}}]}
;
% get_kv(This, Table, Key, Options)
function_info('get_kv', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, {struct, {'hibari_types', 'ReadOptions'}}}]}
;
function_info('get_kv', reply_type) ->
  {struct, {'hibari_types', 'GetResponse'}};
function_info('get_kv', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'ServiceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'TimedOutException'}}},
          {3, {struct, {'hibari_types', 'KeyNotExistsException'}}},
          {4, {struct, {'hibari_types', 'TSErrorException'}}}]}
;
% get_many(This, Table, Key, Max_keys, Options)
function_info('get_many', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, i32},
          {4, {struct, {'hibari_types', 'ReadOptions'}}}]}
;
function_info('get_many', reply_type) ->
  {struct, {'hibari_types', 'GetManyResponse'}};
function_info('get_many', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'ServiceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'TimedOutException'}}},
          {3, {struct, {'hibari_types', 'TSErrorException'}}}]}
;
% do_ops(This, Table, Do_operations, Options)
function_info('do_ops', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'hibari_types', 'Op'}}}},
          {3, {struct, {'hibari_types', 'DoOptions'}}}]}
;
function_info('do_ops', reply_type) ->
  {struct, {'hibari_types', 'DoResponse'}};
function_info('do_ops', exceptions) ->
  {struct, [{1, {struct, {'hibari_types', 'ServiceNotAvailableException'}}},
          {2, {struct, {'hibari_types', 'TimedOutException'}}},
          {3, {struct, {'hibari_types', 'TransactionFailureException'}}}]}
;
function_info(_Func, _Info) -> erlang:error(function_clause).

